name: Build and Release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (format: vX.X.X)'
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        id: setup_flutter
        uses: subosito/flutter-action@v2.18.0
        with:
          channel: stable
          flutter-version-file: pubspec.yaml
          cache: true

      - name: Install Dependencies
        id: install_dependencies
        run: flutter pub get

      - name: Run Tests
        id: run_tests
        run: flutter test

  update_version:
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        id: setup_flutter
        uses: subosito/flutter-action@v2.18.0
        with:
          channel: stable
          flutter-version-file: pubspec.yaml
          cache: true

      - name: Update Version
        id: update_version
        uses: yosemiteyss/update-package-version@v1.0.5
        with:
          runtime: dart
          release_tag: ${{ github.event.inputs.release_tag }}
        env:
          WRITE_REPO_PAT: ${{ secrets.WRITE_REPO_PAT }}

  build_windows:
    needs: [ update_version ]
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Setup Flutter
        id: setup_flutter
        uses: subosito/flutter-action@v2.18.0
        with:
          channel: stable
          flutter-version-file: pubspec.yaml
          cache: true

      - name: Install Dependencies
        id: install_dependencies
        run: flutter pub get

      - name: Build Release
        id: build_release
        run: flutter build windows --release --target=lib/main/main.dart

      - name: Read Package Info
        id: read_package_info
        run: |
          $packageName = (Select-String -Path "pubspec.yaml" -Pattern "^name:\s*(.+)").Matches.Groups[1].Value
          $version = (Select-String -Path "pubspec.yaml" -Pattern "^version:\s*(.+)").Matches.Groups[1].Value
          echo "PACKAGE_NAME=$packageName" >> $env:GITHUB_ENV
          echo "VERSION_NAME=$version" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Archive Release
        id: archive_release
        run: |
          $archiveName = "${env:PACKAGE_NAME}-${env:VERSION_NAME}-windows.zip"
          echo "ARCHIVE_NAME=$archiveName" >> ${env:GITHUB_ENV}
          Compress-Archive -Path "build/windows/x64/runner/Release/*" -DestinationPath $archiveName
        shell: powershell

      - name: Upload Artifact
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_NAME }}

  create_release:
    needs: [ build_windows ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Read Package Info
        id: read_package_info
        run: |
          echo "PACKAGE_NAME=$(yq e '.name' pubspec.yaml)" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$(yq e '.version' pubspec.yaml)" >> $GITHUB_ENV

      - name: Download Artifact (Windows)
        id: download_artifact_windows
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}-windows.zip
          path: ./release

      - name: Delete Artifact
        id: delete_artifact
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            ${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}-windows.zip
          failOnError: false

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.PACKAGE_VERSION }}
          tag_name: ${{ env.PACKAGE_VERSION }}
          files: |
            ./release/${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.WRITE_REPO_PAT }}